set(HAWKTRACER_LISTENER_HEADERS
    include/hawktracer/listeners/file_dump_listener.h
    include/hawktracer/listeners/tcp_listener.h)

set(HAWKTRACER_CORE_HEADERS
    include/hawktracer/alloc.h
    include/hawktracer/bag.h
    include/hawktracer/base_types.h
    include/hawktracer/scoped_tracepoint.h
    include/hawktracer/scoped_tracepoint.hpp
    include/hawktracer/core_events.h
    include/hawktracer/event_id_provider.h
    include/hawktracer/event_macros.h
    include/hawktracer/events.h
    include/hawktracer/feature_cached_string.h
    include/hawktracer/feature_callstack.h
    include/hawktracer/global_timeline.h
    include/hawktracer/init.h
    include/hawktracer/listener_buffer.h
    include/hawktracer/listeners.h
    include/hawktracer/macros.h
    include/hawktracer/mkcreflect.h
    include/hawktracer/monotonic_clock.h
    include/hawktracer/registry.h
    include/hawktracer/stack.h
    include/hawktracer/thread.h
    include/hawktracer/timeline.h
    include/hawktracer/timeline_listener.h)

set(HAWKTRACER_LIB_HEADERS ${HAWKTRACER_LISTENER_HEADERS} ${HAWKTRACER_CORE_HEADERS})

set(HAWKTRACER_LISTENERS_SOURCES
    listeners/file_dump_listener.c
    listeners/tcp_listener.cpp)

set(HAWKTRACER_CORE_SOURCES
    alloc.c
    bag.c
    event_id_provider.cpp
    events.c
    feature_cached_string.c
    feature_callstack.c
    global_timeline.cpp
    init.c
    listener_buffer.c
    monotonic_clock.cpp
    mutex.cpp
    registry.c
    scoped_tracepoint.c
    stack.c
    task_scheduler.c
    tcp_server.cpp
    thread.cpp
    timeline.c
    timeline_listener.c)

if (HT_PLATFORM_FEATURE_CPU_USAGE_ENABLED)
    list(APPEND HAWKTRACER_CORE_HEADERS include/hawktracer/cpu_usage.h)
    list(APPEND HAWKTRACER_CORE_SOURCES "${HT_PLATFORM_FEATURE_CPU_USAGE_SOURCE}")
endif()

if (CMAKE_USE_PTHREADS_INIT)
    set(HT_USE_PTHREADS ON)
    list(APPEND HAWKTRACER_CORE_SOURCES posix_mapped_tracepoint.c)
endif()

configure_file(include/hawktracer/config.h.in include/hawktracer/config.h)

set(HAWKTRACER_LIB_SOURCES ${HAWKTRACER_LISTENERS_SOURCES} ${HAWKTRACER_CORE_SOURCES})
set(HAWKTRACER_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_BINARY_DIR}/include")

# We need to compile sources 2 times - the reason why we can't re-use object files
# is because for shared lib they'll be compiled with -fPIC, which is not needed
# (and might affect a performance) for static libraries.
set(HAWKTRACER_LIB_INSTALL_TARGETS)
if(ENABLE_SHARED_LIB)
    add_library(hawktracer SHARED ${HAWKTRACER_LIB_SOURCES})
    target_include_directories(hawktracer PUBLIC
        "$<BUILD_INTERFACE:${HAWKTRACER_INCLUDE_DIRS}>"
        $<INSTALL_INTERFACE:include>)
    target_compile_definitions(hawktracer PRIVATE -DHT_COMPILE_SHARED_EXPORT)
    list(APPEND HAWKTRACER_LIB_INSTALL_TARGETS hawktracer)
endif(ENABLE_SHARED_LIB)
if(ENABLE_STATIC_LIB)
    add_library(hawktracer_static STATIC ${HAWKTRACER_LIB_SOURCES})
    target_include_directories(hawktracer_static PUBLIC
        "$<BUILD_INTERFACE:${HAWKTRACER_INCLUDE_DIRS}>"
        $<INSTALL_INTERFACE:include>)
    target_compile_definitions(hawktracer_static PRIVATE -DHT_COMPILE_STATIC)
    list(APPEND HAWKTRACER_LIB_INSTALL_TARGETS hawktracer_static)
endif(ENABLE_STATIC_LIB)

if (ENABLE_STATIC_LINKING)
    set(HAWKTRACER_LIB hawktracer_static PARENT_SCOPE)
    set(HAWKTRACER_COMPILE_DEFINITIONS "-DHT_COMPILE_STATIC" PARENT_SCOPE)
else()
    set(HAWKTRACER_LIB hawktracer PARENT_SCOPE)
    set(HAWKTRACER_COMPILE_DEFINITIONS "" PARENT_SCOPE)
endif (ENABLE_STATIC_LINKING)

install(TARGETS ${HAWKTRACER_LIB_INSTALL_TARGETS}
    EXPORT HawkTracerTargets
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)

install(DIRECTORY include/hawktracer
    DESTINATION include
    PATTERN "config.h.in" EXCLUDE)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/include/hawktracer/config.h
    DESTINATION include/hawktracer/)
install(FILES
    include/hawktracer.h
    DESTINATION include/)
